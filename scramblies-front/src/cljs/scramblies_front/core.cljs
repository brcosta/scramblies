(ns scramblies-front.core
  (:require
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    [ajax.core :refer [GET]]
    [clerk.core :as clerk]
    [accountant.core :as accountant]))

;; -------------------------
;; Server calls

(defn validate-scramble! [str1 str2 data]
  (js/console.log @str1 @str2)
  ; TODO parametrize hardcoded url
  (GET (str "http://localhost:3000/scramblies?str1=" @str1 "&str2=" @str2)
       {:handler       #(reset! data %)
        :error-handler (fn [{:keys [status status-text]}]
                         (js/console.log status status-text))}))

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))


;; -------------------------
;; Page components

(defn scramble []
  (let [data (atom "No result yet!")
        str1 (atom nil)
        str2 (atom nil)]
    (fn []
      (js/console.log @data)
      [:div
       [:b [:div "Scramblies Result: "]]
       [:div @data]
       [:input
        {:value       @str1
         :placeholder "String 1"
         :on-change   #(reset! str1 (.. % -target -value))}]
       [:input
        {:value       @str2
         :placeholder "String 2"
         :on-change   #(reset! str2 (.. % -target -value))}]
       [:button {:on-click #(validate-scramble! str1 str2 data)}
        [:i " Scramble!"]]])))

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to Scramblies"]
     [scramble]
     ]
    ))

(defn about-page []
  (fn [] [:span.main
          [:h1 "Trying to learn some Cljs"]
          [:p "The UI could get some love..."]
          ]))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About scramblies"]]]
       [page]
       [:footer
        [:p "Scramblies was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
